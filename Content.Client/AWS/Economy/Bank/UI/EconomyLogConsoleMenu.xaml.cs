using System;
using System.Collections.Generic;
using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared.AWS.Economy.Bank;
using Robust.Client.UserInterface;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using Robust.Shared.Maths;

namespace Content.Client.AWS.Economy.Bank.UI;

[GenerateTypedNameReferences]
public sealed partial class EconomyLogConsoleMenu : FancyWindow
{
    [Dependency] private readonly EntityManager _entityManager = default!;

    private IReadOnlyList<Entity<EconomyBankAccountComponent>> _accounts = default!;
    private readonly List<RichTextLabel> _logLabels = new();

    public EconomyLogConsoleMenu(EconomyLogConsoleBoundUserInterface owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _ = owner; // retained for parity with window construction

        var bankAccountSystem = _entityManager.System<EconomyBankAccountSystemShared>();
        _accounts = bankAccountSystem.GetAccounts().Values.ToList();

        FillList();

        FindAccount.OnTextEntered += OnTextEnteredAccount;
        FindLog.OnTextEntered += OnTextEnteredLog;

        LogDetails.OnResized += UpdateLogLabelWidths;

        ShowLogMessage(Loc.GetString("economybanksystem-log-console-select-account"));
    }

    private void FillList()
    {
        foreach (var (_, account) in _accounts)
        {
            var field = AccountList.AddItem(FormFieldName(account));
            field.Metadata = account;
            field.OnSelected += OnSelectAccount;
        }

        AccountList.SortItemsByText();
    }

    private void OnSelectAccount(ItemList.Item accountItem)
    {
        if (accountItem.Metadata is not EconomyBankAccountComponent account)
            return;

        PopulateLogs(account);
    }

    private void OnTextEnteredAccount(LineEdit.LineEditEventArgs eventArgs)
    {
        AccountList.Clear();
        var filter = eventArgs.Text;

        foreach (var (_, account) in _accounts)
        {
            var fieldName = FormFieldName(account);
            if (!Matches(fieldName, filter))
                continue;

            var field = AccountList.AddItem(fieldName);
            field.Metadata = account;
            field.OnSelected += OnSelectAccount;
        }

        if (AccountList.Count == 0)
        {
            AccountList.AddItem("No data acquired");
            return;
        }

        AccountList.SortItemsByText();
    }

    private void OnTextEnteredLog(LineEdit.LineEditEventArgs eventArgs)
    {
        if (!AccountList.GetSelected().Any())
        {
            ShowLogMessage(Loc.GetString("economybanksystem-log-console-error-no-selection"));
            return;
        }

        var accountItem = AccountList.GetSelected().First();
        if (accountItem.Metadata is not EconomyBankAccountComponent account)
            return;

        PopulateLogs(account, eventArgs.Text);
    }

    private void PopulateLogs(EconomyBankAccountComponent account, string? filter = null)
    {
        ClearLogDetails();

        if (account.Logs.Count == 0)
        {
            AddLogEntry(Loc.GetString("economy-Terminal-NoLogsDetected"));
            return;
        }

        var hasEntries = false;

        foreach (var log in account.Logs.AsEnumerable().Reverse())
        {
            if (!string.IsNullOrWhiteSpace(filter) && !Matches(log.Text, filter))
                continue;

            AddLogEntry(FormatLogEntry(log));
            hasEntries = true;
        }

        if (!hasEntries)
            AddLogEntry(Loc.GetString("economybanksystem-log-console-no-results"));
    }

    private void AddLogEntry(string text)
    {
        var message = new FormattedMessage();
        message.AddText(text);

        var panel = new PanelContainer
        {
            HorizontalExpand = true,
            StyleClasses = { "EconomyLogEntry" },
            Margin = new Thickness(0f)
        };

        var label = new RichTextLabel
        {
            HorizontalExpand = true,
            Margin = new Thickness(0f)
        };
        label.StyleClasses.Add("EconomyLogEntryLabel");

        label.SetMessage(message);
        panel.AddChild(label);
        LogDetails.AddChild(panel);

        _logLabels.Add(label);

        ApplyLabelWidth(label);
    }

    private void UpdateLogLabelWidths()
    {
        foreach (var label in _logLabels)
            ApplyLabelWidth(label);
    }

    private void ApplyLabelWidth(RichTextLabel label)
    {
        var width = LogDetails.Size.X;

        if (width <= 0f && LogDetails.Parent is Control parent)
            width = parent.Size.X;

        if (width <= 0f)
            return;

        const float panelPadding = 12f;
        var contentWidth = MathF.Max(0f, width - panelPadding);

        label.MinWidth = contentWidth;
        label.MaxWidth = contentWidth;
    }

    private void ShowLogMessage(string message)
    {
        ClearLogDetails();
        AddLogEntry(message);
    }

    private void ClearLogDetails()
    {
        _logLabels.Clear();
        LogDetails.RemoveAllChildren();
    }

    private static string FormatLogEntry(EconomyBankAccountLogField log)
    {
        return $"[{log.Date:hh\\:mm\\:ss}] {log.Text}";
    }

    private static bool Matches(string source, string? filter)
    {
        if (string.IsNullOrWhiteSpace(filter))
            return true;

        return source.IndexOf(filter, StringComparison.OrdinalIgnoreCase) >= 0;
    }

    private static string FormFieldName(EconomyBankAccountComponent account)
    {
        return $"{account.AccountID} - {account.AccountName}";
    }
}



