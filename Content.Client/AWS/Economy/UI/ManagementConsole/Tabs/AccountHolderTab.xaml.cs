using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface;
using Content.Shared.AWS.Economy;
using Robust.Shared.Prototypes;
using System.Linq;
using Content.Shared.Roles;
using Robust.Client.UserInterface.Controls;

namespace Content.Client.AWS.Economy.UI.ManagementConsole.Tabs;

[GenerateTypedNameReferences]
public sealed partial class AccountHolderTab : Control
{
    private EconomyBankAccountComponent? _currentAccount;

    [Dependency] private readonly EntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private List<string> _jobs = new();
    private static ProtoId<JobPrototype> _defaultJob = "Passenger";

    public Entity<EconomyAccountHolderComponent>? CurrentCard;
    public bool Priveleged;

    public Action<EconomyBankAccountComponent, string>? OnChangeNamePressed;
    public Action<EconomyBankAccountComponent>? OnBlockAccountPressed;
    public Action<EconomyBankAccountComponent, string>? OnChangeJob;
    public Action<EconomyBankAccountComponent, ulong>? OnChangeSalary;
    public Action<NetEntity, string>? OnChangeAccountPressed;
    public Action<NetEntity>? OnInitializeAccountPressed;

    public AccountHolderTab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        var jobs = _prototypeManager.EnumeratePrototypes<JobPrototype>().ToList();
        jobs.Sort((x, y) => string.Compare(x.LocalizedName, y.LocalizedName, StringComparison.CurrentCulture));
        foreach (var job in jobs)
        {
            if (!job.OverrideConsoleVisibility.GetValueOrDefault(job.SetPreference))
                continue;

            _jobs.Add(job.ID);
            JobPresetOptionButton.AddItem(Loc.GetString(job.Name), _jobs.Count - 1);
        }

        SalaryAmountBox.AddLeftButton(-10, "-10");
        SalaryAmountBox.AddLeftButton(-1, "-1");
        SalaryAmountBox.AddRightButton(1, "+1");
        SalaryAmountBox.AddRightButton(10, "+10");
        SalaryAmountBox.SetButtonDisabled(true);

        GetAccount(CurrentCard);

        SalaryAmountBox.ValueChanged += OnSalaryValueChanged;

        ChangeNameButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            OnChangeNamePressed?.Invoke(_currentAccount, ChangeNamePrompt.Text);
        };
        BlockButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            OnBlockAccountPressed?.Invoke(_currentAccount);
        };
        JobPresetOptionButton.OnItemSelected += args =>
        {
            args.Button.SelectId(args.Id);

            var bankAccountSystem = _entityManager.System<EconomyBankAccountSystemShared>();
            if (bankAccountSystem.TryGetSalaryJobEntry(_jobs[args.Id], "NanotrasenDefaultSallaries", out var jobEntry))
                SalaryAmountBox.Value = (int)jobEntry.Value.Sallary;
        };
        ChangeSalaryInfoButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            var jobName = _currentAccount.JobName;
            var salary = _currentAccount.Salary;
            if (JobPresetOptionButton.SelectedId != _jobs.IndexOf(jobName.GetValueOrDefault()))
                OnChangeJob?.Invoke(_currentAccount, _jobs[JobPresetOptionButton.SelectedId]);
            if (SalaryAmountBox.Value != (int)salary.GetValueOrDefault())
                OnChangeSalary?.Invoke(_currentAccount, (ulong)SalaryAmountBox.Value);
        };
        ChangeAccountButton.OnPressed += _ =>
        {
            if (CurrentCard is null)
                return;

            var economySystem = _entityManager.System<EconomyBankAccountSystemShared>();
            if (!economySystem.IsValidAccount(ChangeAccountPrompt.Text))
            {
                ErrorLabel.Text = Loc.GetString("economybanksystem-management-console-error-invalid-account");
                return;
            }

            var netEntity = _entityManager.GetNetEntity(CurrentCard.Value);
            OnChangeAccountPressed?.Invoke(netEntity, ChangeAccountPrompt.Text);
        };
        InitializeAccountButton.OnPressed += _ =>
        {
            if (CurrentCard is null)
                return;

            var netEntity = _entityManager.GetNetEntity(CurrentCard.Value);
            OnInitializeAccountPressed?.Invoke(netEntity);
        };
    }

    private void GetAccount(EconomyAccountHolderComponent? accountHolder)
    {
        var economySystem = _entityManager.System<EconomyBankAccountSystemShared>();
        if (accountHolder is not null && economySystem.TryGetAccount(accountHolder.AccountID, out var accountEnt))
        {
            _currentAccount = accountEnt.Comp;
            FillAccount(accountEnt.Comp);
            UpdateButtons(Priveleged);
            return;
        }

        _currentAccount = null;
        FillAccount(null);
        UpdateButtons(Priveleged);
    }

    private void FillAccount(EconomyBankAccountComponent? account)
    {
        AccountInitLabel.Text = account is not null ? Loc.GetString("economybanksystem-management-console-management-initialized") :
                                                      Loc.GetString("economybanksystem-management-console-management-not-initialized");
        AccountIdLabel.Text = account is not null ? account.AccountID : "-";
        AccountOwnerLabel.Text = account is not null ? account.AccountName : "-";
        var balance = account is not null ? string.Format("{0:N0}", account.Balance) : "-";
        AccountBalanceLabel.Text = balance;
        var blocked = account is not null ? (account.Blocked ? Loc.GetString("economybanksystem-management-console-management-block") : Loc.GetString("economybanksystem-management-console-management-unblock"))
                                          : "-";
        var blockedButton = account is not null ? (account.Blocked ? Loc.GetString("economybanksystem-management-console-management-unblock-button") : Loc.GetString("economybanksystem-management-console-management-block-button"))
                                                : "-";
        AccountBlockStatusLabel.Text = blocked;
        BlockButton.Text = blockedButton;
        var salary = account?.Salary ?? 0;
        var paydayStatus = account is not null ? (account.CanReachPayDay ? Loc.GetString("economybanksystem-management-console-management-salary-reachable", ("salary", salary)) : Loc.GetString("economybanksystem-management-console-management-salary-not-reachable"))
                                               : "-";
        AccountPaydayStatusLabel.Text = paydayStatus;
        JobPresetOptionButton.SelectId(GetJobIndex(account?.JobName));
        SalaryAmountBox.Value = (int)salary;
    }

    private void UpdateButtons(bool priveleged)
    {
        var noAccount = !priveleged || _currentAccount is null;

        ChangeNameButton.Disabled = noAccount;
        BlockButton.Disabled = noAccount;
        ChangeAccountButton.Disabled = !priveleged || CurrentCard is null;
        InitializeAccountButton.Disabled = !priveleged || _currentAccount is not null || CurrentCard is null;
        JobPresetOptionButton.Disabled = noAccount;
        SalaryAmountBox.LineEditDisabled = noAccount;
        SalaryAmountBox.SetButtonDisabled(noAccount);
        ChangeSalaryInfoButton.Disabled = noAccount;
    }

    private void OnSalaryValueChanged(ValueChangedEventArgs args)
    {
        // what shitcode does to a man
        SalaryAmountBox.ValueChanged -= OnSalaryValueChanged;
        SalaryAmountBox.Value = Math.Max(0, args.Value);
        SalaryAmountBox.ValueChanged += OnSalaryValueChanged;
    }

    private int GetJobIndex(string? jobName)
    {
        var jobIndex = jobName is not null ? _jobs.IndexOf(jobName) : _jobs.IndexOf(_defaultJob);
        return jobIndex < 0 ? _jobs.IndexOf(_defaultJob) : jobIndex;
    }

    public void OnUpdateState(string? holderID,
                              string? accountID,
                              string? accountName,
                              ulong? balance,
                              ulong? penalty,
                              bool? blocked,
                              bool? canReachPayDay,
                              string? jobName,
                              ulong? salary)
    {
        if (CurrentCard is null || holderID is null)
        {
            _currentAccount = null;
            FillAccount(null);
            UpdateButtons(Priveleged);
            return;
        }

        if (holderID != accountID)
        {
            FillAccount(_currentAccount);
            UpdateButtons(Priveleged);
            return;
        }

        AccountInitLabel.Text = accountID is not null ? Loc.GetString("economybanksystem-management-console-management-initialized") :
                                                      Loc.GetString("economybanksystem-management-console-management-not-initialized");
        accountID ??= "-";
        AccountIdLabel.Text = accountID;
        AccountOwnerLabel.Text = accountName ?? "-";
        var accountBalance = balance is not null ? string.Format("{0:N0}", balance) : "-";
        AccountBalanceLabel.Text = accountBalance;
        var accountBlocked = blocked is not null ? (blocked.Value ? Loc.GetString("economybanksystem-management-console-management-block") : Loc.GetString("economybanksystem-management-console-management-unblock"))
                                          : "-";
        var blockedButton = blocked is not null ? (blocked.Value ? Loc.GetString("economybanksystem-management-console-management-unblock-button") : Loc.GetString("economybanksystem-management-console-management-block-button"))
                                                : "-";
        AccountBlockStatusLabel.Text = accountBlocked;
        BlockButton.Text = blockedButton;
        salary ??= 0;
        var paydayStatus = canReachPayDay is not null ? (canReachPayDay.Value ? Loc.GetString("economybanksystem-management-console-management-salary-reachable", ("salary", salary)) : Loc.GetString("economybanksystem-management-console-management-salary-not-reachable"))
                                                      : "-";
        AccountPaydayStatusLabel.Text = paydayStatus;
        JobPresetOptionButton.SelectId(GetJobIndex(jobName));
        SalaryAmountBox.Value = (int)salary;

        _currentAccount = null;
        var economySystem = _entityManager.System<EconomyBankAccountSystemShared>();
        if (economySystem.TryGetAccount(accountID, out var foundAccount))
            _currentAccount = foundAccount.Comp;
        UpdateButtons(Priveleged);
    }
}
