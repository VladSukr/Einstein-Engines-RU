using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface;
using Content.Shared.AWS.Economy;
using System.Linq;
using Robust.Client.UserInterface.Controls;
using Content.Shared.Roles;
using Robust.Shared.Prototypes;

namespace Content.Client.AWS.Economy.UI.ManagementConsole.Tabs;

[GenerateTypedNameReferences]
public sealed partial class BonusTab : Control
{
    [Dependency] private readonly EntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private IReadOnlyList<Entity<EconomyBankAccountComponent>> _cachedAccounts = default!;
    private List<Entity<EconomyBankAccountComponent>> _payerAccounts = new();
    private List<DepartmentPrototype> _departments = new();
    private DepartmentPrototype? _selectedDepartment;
    private List<EconomyBankAccountComponent> _selectedAccounts = new();
    private EconomyBankAccountComponent? _selectedPayer;

    public Action<string, float, List<string>>? OnPayBonusPressed;

    public bool Priveleged;

    public BonusTab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        var departments = _prototypeManager.EnumeratePrototypes<DepartmentPrototype>().ToList();
        departments.Sort((x, y) => string.Compare(Loc.GetString(x.ID), Loc.GetString(y.ID), StringComparison.CurrentCulture));
        DepartmentFilterOptionButton.AddItem("-", 0); // don't forget about it
        foreach (var department in departments)
        {
            _departments.Add(department);
            DepartmentFilterOptionButton.AddItem(Loc.GetString(department.ID), _departments.Count); // don't forget about it
        }

        UpdateAccounts();
        UpdateButtons(Priveleged);
        FillList();
        FillInfo();

        FindAccount.OnTextEntered += OnTextEnteredAccount;
        BonusPercentBox.ValueChanged += OnBonusValueChanged;

        BonusPercentBox.AddLeftButton(-10, "-10%");
        BonusPercentBox.AddLeftButton(-1, "-1%");
        BonusPercentBox.AddRightButton(1, "+1%");
        BonusPercentBox.AddRightButton(10, "+10%");

        DepartmentFilterOptionButton.OnItemSelected += args =>
        {
            args.Button.SelectId(args.Id);

            _selectedDepartment = args.Id == 0 ? null : _departments[args.Id - 1];
            FillList();
        };
        PayerAccountOptionButton.OnItemSelected += args =>
        {
            args.Button.SelectId(args.Id);

            _selectedPayer = _payerAccounts[args.Id];
            UpdateButtons(Priveleged);
            FillInfo();
        };
        PayBonusButton.OnPressed += _ =>
        {
            if (_selectedAccounts.Count <= 0 || _selectedPayer is null)
                return;

            var accountIDs = new List<string>();
            foreach (var account in _selectedAccounts)
                accountIDs.Add(account.AccountID);

            var bonusPercent = BonusPercentBox.Value / 100f;
            OnPayBonusPressed?.Invoke(_selectedPayer.AccountID, bonusPercent, accountIDs);
        };
        ClearSelectedButton.OnPressed += _ =>
        {
            if (_selectedAccounts.Count <= 0)
                return;

            SelectedAccountList.Clear();
            _selectedAccounts.Clear();
            UpdateButtons(Priveleged);
            FillList();
            FillInfo();
        };
    }

    public void OnUpdateState(bool priveleged)
    {
        Priveleged = priveleged;
        UpdateAccounts();
        UpdateButtons(Priveleged);
        FillList();
        FillInfo();
    }

    private void UpdateAccounts()
    {
        var bankAccountSystem = _entityManager.System<EconomyBankAccountSystemShared>();
        var tags = new List<BankAccountTag>() { BankAccountTag.Personal };
        _cachedAccounts = bankAccountSystem.GetAccounts(EconomyBankAccountMask.ByTags, tags).Values.ToList();

        var payerTags = new List<BankAccountTag>() { BankAccountTag.Station };
        var payers = bankAccountSystem.GetAccounts(EconomyBankAccountMask.ByTags, payerTags).Values;
        PayerAccountOptionButton.Clear();
        _payerAccounts.Clear();
        if (payers.Any())
        {
            foreach (var account in payers)
            {
                _payerAccounts.Add(account);
                PayerAccountOptionButton.AddItem(account.Comp.AccountID, _payerAccounts.Count - 1);
            }
            _selectedPayer = _payerAccounts.FirstOrDefault().Comp;
            PayerAccountOptionButton.SelectId(0);
        }
    }

    private void UpdateButtons(bool priveleged)
    {
        PayerAccountOptionButton.Disabled = !priveleged;
        BonusPercentBox.LineEditDisabled = !priveleged;
        BonusPercentBox.SetButtonDisabled(!priveleged);
        PayBonusButton.Disabled = !priveleged ||
                                  _selectedPayer == null ||
                                  _selectedAccounts.Count <= 0 ||
                                  CalculateBonusPayment() > _selectedPayer.Balance;
        ClearSelectedButton.Disabled = _selectedAccounts.Count <= 0;
    }

    private void FillList()
    {
        AccountList.Clear();
        foreach (var (key, value) in _cachedAccounts)
        {
            // that's nasty
            if (_selectedAccounts.Contains(value))
                continue;

            if (_selectedDepartment != null && value.JobName is { } job && !_selectedDepartment.Roles.Contains(job))
                continue;

            if (_selectedDepartment != null && value.JobName == null)
                continue;

            var field = AccountList.AddItem(FormFieldName(value));
            field.Metadata = value;
            field.OnSelected += OnSelectAccount;
        }

        AccountList.SortItemsByText();
    }

    private string FormFieldName(EconomyBankAccountComponent account)
    {
        return account.AccountID + " â€” " + account.AccountName;
    }

    private void UpdateSelectedAccounts()
    {
        SelectedAccountList.Clear();
        foreach (var account in _selectedAccounts)
        {
            var field = SelectedAccountList.AddItem(FormFieldName(account));
            field.Metadata = account;
            field.OnSelected += OnSelectSelectedAccount;
        }

        SelectedAccountList.SortItemsByText();
    }

    private void OnSelectAccount(ItemList.Item accountId)
    {
        if (accountId.Metadata is not EconomyBankAccountComponent account)
            return;

        _selectedAccounts.Add(account);
        UpdateSelectedAccounts();
        UpdateButtons(Priveleged);
        FillList();
        FillInfo();
    }

    private void OnSelectSelectedAccount(ItemList.Item accountId)
    {
        if (accountId.Metadata is not EconomyBankAccountComponent account)
            return;

        _selectedAccounts.Remove(account);
        UpdateSelectedAccounts();
        UpdateButtons(Priveleged);
        FillList();
        FillInfo();
    }

    private void OnBonusValueChanged(ValueChangedEventArgs args)
    {
        // what shitcode does to a man
        BonusPercentBox.ValueChanged -= OnBonusValueChanged;
        BonusPercentBox.Value = Math.Max(0, args.Value);
        BonusPercentBox.ValueChanged += OnBonusValueChanged;

        FillInfo();
    }

    private void FillInfo()
    {
        PayerAccountBalanceLabel.Text = string.Format("{0:N0}", _selectedPayer?.Balance);
        TotalBonusLabel.Text = string.Format("{0:N0}", CalculateBonusPayment());
    }

    private ulong CalculateBonusPayment()
    {
        if (_selectedAccounts.Count <= 0)
            return 0;

        var bonusPercent = BonusPercentBox.Value / 100f;
        ulong total = 0;
        foreach (var account in _selectedAccounts)
            total += account.Salary is not null ? (ulong)(account.Salary * bonusPercent) : 0;

        return total;
    }

    private void OnTextEnteredAccount(LineEdit.LineEditEventArgs eventArgs)
    {
        AccountList.Clear();
        var upText = eventArgs.Text.ToUpper();
        foreach (var (key, value) in _cachedAccounts)
        {
            var fieldName = FormFieldName(value);
            if (fieldName.Contains(upText))
            {
                var field = AccountList.AddItem(fieldName);
                field.Metadata = value;
                field.OnSelected += OnSelectAccount;
            }
        }
        if (AccountList.Count == 0)
        {
            AccountList.AddItem("No data acquired");
            return;
        }
        AccountList.SortItemsByText();
    }
}
