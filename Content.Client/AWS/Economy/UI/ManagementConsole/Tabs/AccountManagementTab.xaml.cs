using Content.Shared.AWS.Economy;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using System.Linq;
using Robust.Client.UserInterface;
using Robust.Shared.Prototypes;
using Content.Shared.Roles;

namespace Content.Client.AWS.Economy.UI.ManagementConsole.Tabs;

[GenerateTypedNameReferences]
public sealed partial class AccountManagementTab : Control
{
    [Dependency] private readonly EntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private IReadOnlyList<Entity<EconomyBankAccountComponent>> _accounts = default!;
    private List<string> _jobs = new();
    private static ProtoId<JobPrototype> _defaultJob = "Passenger";
    private EconomyBankAccountComponent? _currentAccount;

    public Action<EconomyBankAccountComponent>? OnBlockAccountPressed;
    public Action<EconomyBankAccountComponent, string>? OnChangeNamePressed;
    public Action<EconomyBankAccountComponent, string>? OnChangeJob;
    public Action<EconomyBankAccountComponent, ulong>? OnChangeSalary;

    public bool Priveleged;

    public AccountManagementTab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        var jobs = _prototypeManager.EnumeratePrototypes<JobPrototype>().ToList();
        jobs.Sort((x, y) => string.Compare(x.LocalizedName, y.LocalizedName, StringComparison.CurrentCulture));
        foreach (var job in jobs)
        {
            if (!job.OverrideConsoleVisibility.GetValueOrDefault(job.SetPreference))
                continue;

            _jobs.Add(job.ID);
            JobPresetOptionButton.AddItem(Loc.GetString(job.Name), _jobs.Count - 1);
        }

        SalaryAmountBox.AddLeftButton(-10, "-10");
        SalaryAmountBox.AddLeftButton(-1, "-1");
        SalaryAmountBox.AddRightButton(1, "+1");
        SalaryAmountBox.AddRightButton(10, "+10");
        SalaryAmountBox.SetButtonDisabled(true);

        UpdateAccountList();

        FindAccount.OnTextEntered += OnTextEnteredAccount;
        SalaryAmountBox.ValueChanged += OnSalaryValueChanged;

        BlockButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            OnBlockAccountPressed?.Invoke(_currentAccount);
        };
        ChangeNameButton.OnPressed += _ =>
        {
            if (_currentAccount is null || ChangeNameBox.Text.Length <= 0)
                return;

            OnChangeNamePressed?.Invoke(_currentAccount, ChangeNameBox.Text);
            ChangeNameBox.Clear();
        };
        JobPresetOptionButton.OnItemSelected += args =>
        {
            args.Button.SelectId(args.Id);

            var bankAccountSystem = _entityManager.System<EconomyBankAccountSystemShared>();
            if (bankAccountSystem.TryGetSalaryJobEntry(_jobs[args.Id], "NanotrasenDefaultSallaries", out var jobEntry))
                SalaryAmountBox.Value = (int)jobEntry.Value.Sallary;
        };
        ChangeSalaryInfoButton.OnPressed += _ =>
        {
            if (_currentAccount is null)
                return;

            var jobName = _currentAccount.JobName;
            var salary = _currentAccount.Salary;
            if (JobPresetOptionButton.SelectedId != _jobs.IndexOf(jobName.GetValueOrDefault()))
                OnChangeJob?.Invoke(_currentAccount, _jobs[JobPresetOptionButton.SelectedId]);
            if (SalaryAmountBox.Value != (int)salary.GetValueOrDefault())
                OnChangeSalary?.Invoke(_currentAccount, (ulong)SalaryAmountBox.Value);
        };
    }

    public void UpdateAccountList()
    {
        AccountList.Clear();
        var bankAccountSystem = _entityManager.System<EconomyBankAccountSystemShared>();
        var accounts = bankAccountSystem.GetAccounts(EconomyBankAccountMask.All);
        _accounts = accounts.Values.ToList();

        FillList();
    }

    public void OnUpdateState(string? accountID,
                              string? accountName,
                              ulong? balance,
                              ulong? penalty,
                              bool? blocked,
                              bool? canReachPayDay,
                              string? jobName,
                              ulong? salary)
    {
        if (accountID is null || _currentAccount?.AccountID != accountID)
        {
            ClearCurrentAccount();
            return;
        }

        accountID ??= "-";
        AccountIdLabel.Text = accountID;
        AccountOwnerLabel.Text = accountName ?? "-";
        var accountBalance = balance is not null ? string.Format("{0:N0}", balance) : "-";
        AccountBalanceLabel.Text = accountBalance;
        var accountBlocked = blocked is not null ? (blocked.Value ? Loc.GetString("economybanksystem-management-console-management-block") : Loc.GetString("economybanksystem-management-console-management-unblock"))
                                          : "-";
        AccountBlockedLabel.Text = accountBlocked;
        salary ??= 0;
        AccountPaydayStatusLabel.Text = canReachPayDay is not null ? (canReachPayDay.Value ? Loc.GetString("economybanksystem-management-console-management-salary-reachable", ("salary", salary)) : Loc.GetString("economybanksystem-management-console-management-salary-not-reachable"))
                                                      : "-";
        var blockedButton = blocked is not null ? (blocked.Value ? Loc.GetString("economybanksystem-management-console-management-unblock-button") : Loc.GetString("economybanksystem-management-console-management-block-button"))
                                                : "-";
        BlockButton.Text = blockedButton;
        JobPresetOptionButton.SelectId(GetJobIndex(jobName));
        SalaryAmountBox.Value = (int)salary;

        var economySystem = _entityManager.System<EconomyBankAccountSystemShared>();
        if (economySystem.TryGetAccount(accountID, out var foundAccount))
            _currentAccount = foundAccount.Comp;
        UpdateButtons(Priveleged);
    }

    private void OnSelectAccount(ItemList.Item accountId)
    {
        if (accountId.Metadata is not EconomyBankAccountComponent account)
            return;

        _currentAccount = account;
        FillAccountInfo(account);
        UpdateButtons(Priveleged);
    }

    private void OnSalaryValueChanged(ValueChangedEventArgs args)
    {
        // what shitcode does to a man
        SalaryAmountBox.ValueChanged -= OnSalaryValueChanged;
        SalaryAmountBox.Value = Math.Max(0, args.Value);
        SalaryAmountBox.ValueChanged += OnSalaryValueChanged;
    }

    private void OnTextEnteredAccount(LineEdit.LineEditEventArgs eventArgs)
    {
        AccountList.Clear();
        var upText = eventArgs.Text.ToUpper();
        foreach (var (key, value) in _accounts)
        {
            var fieldName = FormFieldName(value);
            if (fieldName.Contains(upText))
            {
                var field = AccountList.AddItem(fieldName);
                field.Metadata = value;
                field.OnSelected += OnSelectAccount;
            }
        }
        if (AccountList.Count == 0)
        {
            AccountList.AddItem("No data acquired");
            return;
        }
        AccountList.SortItemsByText();
    }

    private void FillList()
    {
        foreach (var (key, value) in _accounts)
        {
            var field = AccountList.AddItem(FormFieldName(value));
            field.Metadata = value;
            field.OnSelected += OnSelectAccount;
        }

        AccountList.SortItemsByText();
    }

    private string FormFieldName(EconomyBankAccountComponent account)
    {
        return account.AccountID + " â€” " + account.AccountName;
    }

    private int GetJobIndex(string? jobName)
    {
        var jobIndex = jobName is not null ? _jobs.IndexOf(jobName) : _jobs.IndexOf(_defaultJob);
        return jobIndex < 0 ? _jobs.IndexOf(_defaultJob) : jobIndex;
    }

    private void UpdateButtons(bool priveleged)
    {
        var disabled = _currentAccount is null || !priveleged;

        BlockButton.Disabled = disabled;
        ChangeNameButton.Disabled = disabled;
        JobPresetOptionButton.Disabled = disabled;
        SalaryAmountBox.LineEditDisabled = disabled;
        SalaryAmountBox.SetButtonDisabled(disabled);
        ChangeSalaryInfoButton.Disabled = disabled;
    }

    private void ClearCurrentAccount()
    {
        AccountIdLabel.Text = "-";
        AccountOwnerLabel.Text = "-";
        AccountBalanceLabel.Text = "-";
        AccountBlockedLabel.Text = "-";
        AccountPaydayStatusLabel.Text = "-";
        BlockButton.Text = "-";
        SalaryAmountBox.Value = 0;

        _currentAccount = null;
        UpdateButtons(Priveleged);
    }

    private void FillAccountInfo(EconomyBankAccountComponent account)
    {
        AccountIdLabel.Text = account.AccountID;
        AccountOwnerLabel.Text = account.AccountName;
        var balance = account.Balance;
        AccountBalanceLabel.Text = balance.ToString("N0") ?? "-";
        AccountBlockedLabel.Text = account.Blocked ? Loc.GetString("economybanksystem-management-console-management-block") :
                                                     Loc.GetString("economybanksystem-management-console-management-unblock");
        var salary = account.Salary ?? 0;
        AccountPaydayStatusLabel.Text = account.CanReachPayDay ? Loc.GetString("economybanksystem-management-console-management-salary-reachable", ("salary", salary)) :
                                                                 Loc.GetString("economybanksystem-management-console-management-salary-not-reachable");
        BlockButton.Text = account.Blocked ? Loc.GetString("economybanksystem-management-console-management-unblock-button") :
                                             Loc.GetString("economybanksystem-management-console-management-block-button");
        JobPresetOptionButton.SelectId(GetJobIndex(account.JobName));
        SalaryAmountBox.Value = (int)salary;
    }
}
