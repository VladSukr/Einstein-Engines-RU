using Content.Client.UserInterface.Controls;
using Content.Shared.AWS.Economy.Bank;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Content.Shared.AWS.Economy.Insurance;
using Content.Client.Ghost.UI;
using System.Linq;
using Robust.Shared.Prototypes;
using Robust.Shared.Localization;

namespace Content.Client.AWS.Economy.Insurance.UI;

[GenerateTypedNameReferences]
public sealed partial class EconomyInsuranceTerminalMenu : FancyWindow
{
    public Action<EconomyInsuranceInfo>? ConfirmEditInsurance;

    private List<EconomyInsurancePrototype> _prototypes;
    private Dictionary<int, EconomyInsuranceInfo> _infos = default!;
    private EconomyInsuranceTerminalRights _insuranceRights = EconomyInsuranceTerminalRights.Its;
    private int _insertedInsuranceId = 0;
    private int _currentSelectedInsuranceId = 0;
    private ProtoId<EconomyInsurancePrototype> _selectedPrototype;

    public EconomyInsuranceTerminalMenu(List<EconomyInsurancePrototype> prototypes)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _prototypes = prototypes;

        InfoContainerButtonConfirm.OnPressed += _ => ConfirmEditInsurance?.Invoke(ExtractNewInfo());
    }

    public void UpdateInfo(int id, EconomyInsuranceTerminalRights rights, Dictionary<int, EconomyInsuranceInfo> infos)
    {
        _infos = infos;
        _insertedInsuranceId = id;
        _insuranceRights = rights;

        UpdateContainters();
    }

    private void UpdateContainters()
    {
        UpdateLeftContainer();
    }

    private EconomyInsuranceInfo ExtractNewInfo()
    {
        return new EconomyInsuranceInfo(_currentSelectedInsuranceId, _selectedPrototype, InfoContainerEditName.Text,
            InfoContainerEditFromPayAccount.Text, InfoContainerEditDNA.Text);
    }

    private void UpdateLeftContainer()
    {
        TargetListContainer.Clear();

        if (_infos is null)
            return;

        foreach (var (id, value) in _infos)
        {
            var item = TargetListContainer.AddItem(value.InsurerName);

            item.OnSelected += item => UpdateRightContainer(id);

            if (id == _insertedInsuranceId)
                item.Selected = true;
        }
    }

    private void SelectInsurancePrototype(ProtoId<EconomyInsurancePrototype> prototype)
    {
        InfoContainerOptionInsuranceChoose.SelectId(prototype.GetHashCode());
        _selectedPrototype = prototype;
    }

    private void UpdateRightContainer(int id)
    {
        if (!_infos.TryGetValue(id, out var currentInfo))
            return;

        _currentSelectedInsuranceId = id;

        var currentProto = _prototypes.First(x => x.ID == currentInfo.InsuranceProto);

        InfoContainerEditName.Text = currentInfo.InsurerName;
        InfoContainerEditDNA.Text = currentInfo.DNA;
        InfoContainerEditFromPayAccount.Text = currentInfo.PayerAccountId;

        // hardcode yes
        InfoContainerEditToPayAccount.Text = "NT-Medical";
        UpdateInsuranceCost(currentProto, currentInfo);

        InfoContainerOptionInsuranceChoose.Clear();

        var hasCurrentPrototypeInList = false;

        foreach (var prototype in _prototypes)
        {
            var selectable = prototype.CanBeBought
                             || prototype.ID == currentInfo.InsuranceProto
                             || prototype.ID == currentInfo.DefaultFreeInsuranceProto; // SS14-RU: keep non-purchasable defaults available

            if (!selectable)
                continue;

            InfoContainerOptionInsuranceChoose.AddItem(prototype.Name, prototype.ID.GetHashCode());
            InfoContainerOptionInsuranceChoose.OnItemSelected += args =>
            {
                foreach (var proto in _prototypes)
                {
                    if (proto.ID.GetHashCode() == args.Id)
                    {
                        SelectInsurancePrototype(proto);
                        if (_infos.TryGetValue(_currentSelectedInsuranceId, out var selectedInfo))
                            UpdateInsuranceCost(proto, selectedInfo);
                    }
                }
            };

            if (prototype.ID == currentInfo.InsuranceProto)
                hasCurrentPrototypeInList = true;
        }

        if (hasCurrentPrototypeInList)
            SelectInsurancePrototype(currentProto);
        else
            _selectedPrototype = currentProto; // SS14-RU: keep current selection even if not present

        if (_insuranceRights == EconomyInsuranceTerminalRights.Full)
        {
            InfoContainerEditName.Editable = true;
            InfoContainerEditDNA.Editable = true;
            InfoContainerEditFromPayAccount.Editable = true;
            InfoContainerEditToPayAccount.Editable = true;
            //InfoContainerEditCost.Editable = true; maybe in future
            InfoContainerOptionInsuranceChoose.Disabled = false;
            return;
        }

        InfoContainerEditName.Editable = false;
        InfoContainerEditDNA.Editable = false;
        InfoContainerEditFromPayAccount.Editable = false;
        InfoContainerEditToPayAccount.Editable = false;
        //InfoContainerEditCost.Editable = false; maybe in future

        if (id == _insertedInsuranceId)
        {
            InfoContainerOptionInsuranceChoose.Disabled = false;
            return;
        }

        InfoContainerOptionInsuranceChoose.Disabled = true;
    }

    private void UpdateInsuranceCost(EconomyInsurancePrototype prototype, EconomyInsuranceInfo info)
    {
        var isFree = prototype.Cost <= 0
                     || prototype.ID == info.DefaultFreeInsuranceProto
                     || prototype.ID == "NonStatus";

        InfoContainerEditCost.Text = isFree
            ? Loc.GetString("economy-insurance-terminal-cost-free")
            : Loc.GetString("economy-insurance-terminal-cost-value", ("cost", prototype.Cost));
    }
}
